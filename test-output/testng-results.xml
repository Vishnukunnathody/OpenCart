<?xml version="1.0" encoding="UTF-8"?>
<testng-results retried="12" ignored="12" total="69" passed="33" failed="12" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2024-11-01T16:56:12 EDT" name="Grouping-Suite" finished-at="2024-11-01T17:03:03 EDT" duration-ms="410884">
    <groups>
      <group name="Master">
        <method signature="LoginTest.verifyLoginToApplicationUsingvalidCredentials(java.util.HashMap)[pri:1, instance:tests.LoginTest@3f07b12c]" name="verifyLoginToApplicationUsingvalidCredentials" class="tests.LoginTest"/>
        <method signature="LogoutTest.logoutFromMyAccountDropMenu()[pri:1, instance:tests.LogoutTest@17a87e37]" name="logoutFromMyAccountDropMenu" class="tests.LogoutTest"/>
        <method signature="RegisterTest.verifyRegisterAccountUsingMandatoryFields()[pri:1, instance:tests.RegisterTest@4b3a45f1]" name="verifyRegisterAccountUsingMandatoryFields" class="tests.RegisterTest"/>
        <method signature="LoginTest.verifyLoginToApplicationUsingInvalidCredentials(java.util.HashMap)[pri:2, instance:tests.LoginTest@3f07b12c]" name="verifyLoginToApplicationUsingInvalidCredentials" class="tests.LoginTest"/>
        <method signature="LogoutTest.verifyLogoutFromRightColumnOption()[pri:2, instance:tests.LogoutTest@17a87e37]" name="verifyLogoutFromRightColumnOption" class="tests.LogoutTest"/>
        <method signature="RegisterTest.verifyRegisterAccountUsingAllFields()[pri:2, instance:tests.RegisterTest@4b3a45f1]" name="verifyRegisterAccountUsingAllFields" class="tests.RegisterTest"/>
        <method signature="RegisterTest.verifyRegisterAccountWithoutanyDetails()[pri:3, instance:tests.RegisterTest@4b3a45f1]" name="verifyRegisterAccountWithoutanyDetails" class="tests.RegisterTest"/>
        <method signature="RegisterTest.verifyRegisterAccountYesSelectedForNewsletter()[pri:4, instance:tests.RegisterTest@4b3a45f1]" name="verifyRegisterAccountYesSelectedForNewsletter" class="tests.RegisterTest"/>
        <method signature="RegisterTest.verifyRegisterAccountNoSelectedForNewsletter()[pri:5, instance:tests.RegisterTest@4b3a45f1]" name="verifyRegisterAccountNoSelectedForNewsletter" class="tests.RegisterTest"/>
        <method signature="LoginTest.verifyForgotPasswordLink()[pri:6, instance:tests.LoginTest@3f07b12c]" name="verifyForgotPasswordLink" class="tests.LoginTest"/>
        <method signature="RegisterTest.verifyDiffWayNavigatingToRegisterAccount()[pri:6, instance:tests.RegisterTest@4b3a45f1]" name="verifyDiffWayNavigatingToRegisterAccount" class="tests.RegisterTest"/>
        <method signature="LoginTest.verifyPlaceholdersOnLoginPage()[pri:7, instance:tests.LoginTest@3f07b12c]" name="verifyPlaceholdersOnLoginPage" class="tests.LoginTest"/>
        <method signature="RegisterTest.verifyRegisteringWithDifferentPassAndConfirmPass()[pri:7, instance:tests.RegisterTest@4b3a45f1]" name="verifyRegisteringWithDifferentPassAndConfirmPass" class="tests.RegisterTest"/>
        <method signature="RegisterTest.verifyRegisteringWithExistingDetails()[pri:8, instance:tests.RegisterTest@4b3a45f1]" name="verifyRegisteringWithExistingDetails" class="tests.RegisterTest"/>
        <method signature="RegisterTest.verifyInvalidEmailTooltipMsg()[pri:9, instance:tests.RegisterTest@4b3a45f1]" name="verifyInvalidEmailTooltipMsg" class="tests.RegisterTest"/>
        <method signature="RegisterTest.verifyUserCannotuseInvalidPhoneNumber(java.util.HashMap)[pri:10, instance:tests.RegisterTest@4b3a45f1]" name="verifyUserCannotuseInvalidPhoneNumber" class="tests.RegisterTest"/>
        <method signature="LoginTest.verifyMaxLoginAttempts()[pri:11, instance:tests.LoginTest@3f07b12c]" name="verifyMaxLoginAttempts" class="tests.LoginTest"/>
        <method signature="RegisterTest.verifyThePlaceholders()[pri:11, instance:tests.RegisterTest@4b3a45f1]" name="verifyThePlaceholders" class="tests.RegisterTest"/>
        <method signature="LoginTest.verifyPasswordFieldToggleToHide()[pri:12, instance:tests.LoginTest@3f07b12c]" name="verifyPasswordFieldToggleToHide" class="tests.LoginTest"/>
        <method signature="RegisterTest.verifyAsterickSymbolForMandatoryFields()[pri:12, instance:tests.RegisterTest@4b3a45f1]" name="verifyAsterickSymbolForMandatoryFields" class="tests.RegisterTest"/>
        <method signature="LoginTest.verifyPasswordCannotCopied()[pri:13, instance:tests.LoginTest@3f07b12c]" name="verifyPasswordCannotCopied" class="tests.LoginTest"/>
        <method signature="RegisterTest.verifyPassWordFieldFollowComplexityStandards(java.util.HashMap)[pri:13, instance:tests.RegisterTest@4b3a45f1]" name="verifyPassWordFieldFollowComplexityStandards" class="tests.RegisterTest"/>
        <method signature="LoginTest.verifyPasswordNotVisibleInPageSource()[pri:14, instance:tests.LoginTest@3f07b12c]" name="verifyPasswordNotVisibleInPageSource" class="tests.LoginTest"/>
        <method signature="RegisterTest.verifyCheckboxNotCheckedByDefault()[pri:14, instance:tests.RegisterTest@4b3a45f1]" name="verifyCheckboxNotCheckedByDefault" class="tests.RegisterTest"/>
        <method signature="LoginTest.verifyLoggingAfterchangingPassword()[pri:15, instance:tests.LoginTest@3f07b12c]" name="verifyLoggingAfterchangingPassword" class="tests.LoginTest"/>
        <method signature="RegisterTest.verifyRegisteringWithNotSelectingPrivacyPolicy()[pri:15, instance:tests.RegisterTest@4b3a45f1]" name="verifyRegisteringWithNotSelectingPrivacyPolicy" class="tests.RegisterTest"/>
        <method signature="RegisterTest.verifyPasswordAndConfirmPasswordToggledToHide()[pri:16, instance:tests.RegisterTest@4b3a45f1]" name="verifyPasswordAndConfirmPasswordToggledToHide" class="tests.RegisterTest"/>
        <method signature="RegisterTest.verifyRegisteringWithNotEnteringPassConfirm()[pri:17, instance:tests.RegisterTest@4b3a45f1]" name="verifyRegisteringWithNotEnteringPassConfirm" class="tests.RegisterTest"/>
        <method signature="RegisterTest.verifyConfirmationEmailSendForSuccessfullRegistration()[pri:18, instance:tests.RegisterTest@4b3a45f1]" name="verifyConfirmationEmailSendForSuccessfullRegistration" class="tests.RegisterTest"/>
      </group> <!-- Master -->
      <group name="DataDriven">
        <method signature="LoginTest.verifyLoginToApplicationUsingvalidCredentials(java.util.HashMap)[pri:1, instance:tests.LoginTest@3f07b12c]" name="verifyLoginToApplicationUsingvalidCredentials" class="tests.LoginTest"/>
        <method signature="LoginTest.verifyLoginToApplicationUsingInvalidCredentials(java.util.HashMap)[pri:2, instance:tests.LoginTest@3f07b12c]" name="verifyLoginToApplicationUsingInvalidCredentials" class="tests.LoginTest"/>
        <method signature="RegisterTest.verifyUserCannotuseInvalidPhoneNumber(java.util.HashMap)[pri:10, instance:tests.RegisterTest@4b3a45f1]" name="verifyUserCannotuseInvalidPhoneNumber" class="tests.RegisterTest"/>
        <method signature="RegisterTest.verifyPassWordFieldFollowComplexityStandards(java.util.HashMap)[pri:13, instance:tests.RegisterTest@4b3a45f1]" name="verifyPassWordFieldFollowComplexityStandards" class="tests.RegisterTest"/>
      </group> <!-- DataDriven -->
      <group name="Regression">
        <method signature="LoginTest.verifyLoginToApplicationUsingvalidCredentials(java.util.HashMap)[pri:1, instance:tests.LoginTest@3f07b12c]" name="verifyLoginToApplicationUsingvalidCredentials" class="tests.LoginTest"/>
        <method signature="LogoutTest.logoutFromMyAccountDropMenu()[pri:1, instance:tests.LogoutTest@17a87e37]" name="logoutFromMyAccountDropMenu" class="tests.LogoutTest"/>
        <method signature="RegisterTest.verifyRegisterAccountUsingMandatoryFields()[pri:1, instance:tests.RegisterTest@4b3a45f1]" name="verifyRegisterAccountUsingMandatoryFields" class="tests.RegisterTest"/>
        <method signature="LoginTest.verifyLoginToApplicationUsingInvalidCredentials(java.util.HashMap)[pri:2, instance:tests.LoginTest@3f07b12c]" name="verifyLoginToApplicationUsingInvalidCredentials" class="tests.LoginTest"/>
        <method signature="LogoutTest.verifyLogoutFromRightColumnOption()[pri:2, instance:tests.LogoutTest@17a87e37]" name="verifyLogoutFromRightColumnOption" class="tests.LogoutTest"/>
        <method signature="RegisterTest.verifyRegisterAccountUsingAllFields()[pri:2, instance:tests.RegisterTest@4b3a45f1]" name="verifyRegisterAccountUsingAllFields" class="tests.RegisterTest"/>
        <method signature="RegisterTest.verifyRegisterAccountWithoutanyDetails()[pri:3, instance:tests.RegisterTest@4b3a45f1]" name="verifyRegisterAccountWithoutanyDetails" class="tests.RegisterTest"/>
        <method signature="RegisterTest.verifyRegisterAccountYesSelectedForNewsletter()[pri:4, instance:tests.RegisterTest@4b3a45f1]" name="verifyRegisterAccountYesSelectedForNewsletter" class="tests.RegisterTest"/>
        <method signature="RegisterTest.verifyRegisterAccountNoSelectedForNewsletter()[pri:5, instance:tests.RegisterTest@4b3a45f1]" name="verifyRegisterAccountNoSelectedForNewsletter" class="tests.RegisterTest"/>
        <method signature="LoginTest.verifyForgotPasswordLink()[pri:6, instance:tests.LoginTest@3f07b12c]" name="verifyForgotPasswordLink" class="tests.LoginTest"/>
        <method signature="RegisterTest.verifyDiffWayNavigatingToRegisterAccount()[pri:6, instance:tests.RegisterTest@4b3a45f1]" name="verifyDiffWayNavigatingToRegisterAccount" class="tests.RegisterTest"/>
        <method signature="LoginTest.verifyPlaceholdersOnLoginPage()[pri:7, instance:tests.LoginTest@3f07b12c]" name="verifyPlaceholdersOnLoginPage" class="tests.LoginTest"/>
        <method signature="RegisterTest.verifyRegisteringWithDifferentPassAndConfirmPass()[pri:7, instance:tests.RegisterTest@4b3a45f1]" name="verifyRegisteringWithDifferentPassAndConfirmPass" class="tests.RegisterTest"/>
        <method signature="RegisterTest.verifyRegisteringWithExistingDetails()[pri:8, instance:tests.RegisterTest@4b3a45f1]" name="verifyRegisteringWithExistingDetails" class="tests.RegisterTest"/>
        <method signature="RegisterTest.verifyInvalidEmailTooltipMsg()[pri:9, instance:tests.RegisterTest@4b3a45f1]" name="verifyInvalidEmailTooltipMsg" class="tests.RegisterTest"/>
        <method signature="RegisterTest.verifyUserCannotuseInvalidPhoneNumber(java.util.HashMap)[pri:10, instance:tests.RegisterTest@4b3a45f1]" name="verifyUserCannotuseInvalidPhoneNumber" class="tests.RegisterTest"/>
        <method signature="LoginTest.verifyMaxLoginAttempts()[pri:11, instance:tests.LoginTest@3f07b12c]" name="verifyMaxLoginAttempts" class="tests.LoginTest"/>
        <method signature="RegisterTest.verifyThePlaceholders()[pri:11, instance:tests.RegisterTest@4b3a45f1]" name="verifyThePlaceholders" class="tests.RegisterTest"/>
        <method signature="LoginTest.verifyPasswordFieldToggleToHide()[pri:12, instance:tests.LoginTest@3f07b12c]" name="verifyPasswordFieldToggleToHide" class="tests.LoginTest"/>
        <method signature="RegisterTest.verifyAsterickSymbolForMandatoryFields()[pri:12, instance:tests.RegisterTest@4b3a45f1]" name="verifyAsterickSymbolForMandatoryFields" class="tests.RegisterTest"/>
        <method signature="LoginTest.verifyPasswordCannotCopied()[pri:13, instance:tests.LoginTest@3f07b12c]" name="verifyPasswordCannotCopied" class="tests.LoginTest"/>
        <method signature="RegisterTest.verifyPassWordFieldFollowComplexityStandards(java.util.HashMap)[pri:13, instance:tests.RegisterTest@4b3a45f1]" name="verifyPassWordFieldFollowComplexityStandards" class="tests.RegisterTest"/>
        <method signature="LoginTest.verifyPasswordNotVisibleInPageSource()[pri:14, instance:tests.LoginTest@3f07b12c]" name="verifyPasswordNotVisibleInPageSource" class="tests.LoginTest"/>
        <method signature="RegisterTest.verifyCheckboxNotCheckedByDefault()[pri:14, instance:tests.RegisterTest@4b3a45f1]" name="verifyCheckboxNotCheckedByDefault" class="tests.RegisterTest"/>
        <method signature="LoginTest.verifyLoggingAfterchangingPassword()[pri:15, instance:tests.LoginTest@3f07b12c]" name="verifyLoggingAfterchangingPassword" class="tests.LoginTest"/>
        <method signature="RegisterTest.verifyRegisteringWithNotSelectingPrivacyPolicy()[pri:15, instance:tests.RegisterTest@4b3a45f1]" name="verifyRegisteringWithNotSelectingPrivacyPolicy" class="tests.RegisterTest"/>
        <method signature="RegisterTest.verifyPasswordAndConfirmPasswordToggledToHide()[pri:16, instance:tests.RegisterTest@4b3a45f1]" name="verifyPasswordAndConfirmPasswordToggledToHide" class="tests.RegisterTest"/>
        <method signature="RegisterTest.verifyRegisteringWithNotEnteringPassConfirm()[pri:17, instance:tests.RegisterTest@4b3a45f1]" name="verifyRegisteringWithNotEnteringPassConfirm" class="tests.RegisterTest"/>
        <method signature="RegisterTest.verifyConfirmationEmailSendForSuccessfullRegistration()[pri:18, instance:tests.RegisterTest@4b3a45f1]" name="verifyConfirmationEmailSendForSuccessfullRegistration" class="tests.RegisterTest"/>
      </group> <!-- Regression -->
    </groups>
    <test started-at="2024-11-01T16:56:12 EDT" name="Test" finished-at="2024-11-01T17:03:03 EDT" duration-ms="410884">
      <class name="tests.LoginTest">
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:56:13 EDT" name="Setup" finished-at="2024-11-01T16:56:18 EDT" duration-ms="4942" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyLoginToApplicationUsingvalidCredentials(java.util.HashMap)[pri:1, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:56:18 EDT" name="verifyLoginToApplicationUsingvalidCredentials" data-provider="ValidloginDataSupplier" finished-at="2024-11-01T16:56:20 EDT" duration-ms="2316" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Runmode=Y, Description=Admin Login, Username=vishnu.71881@gmail.com, Expected Result=Success, Password=Vishnu123}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyLoginToApplicationUsingvalidCredentials -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:56:20 EDT" name="tearDown" finished-at="2024-11-01T16:56:20 EDT" duration-ms="111" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:56:20 EDT" name="Setup" finished-at="2024-11-01T16:56:24 EDT" duration-ms="3606" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyLoginToApplicationUsingvalidCredentials(java.util.HashMap)[pri:1, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:56:24 EDT" name="verifyLoginToApplicationUsingvalidCredentials" data-provider="ValidloginDataSupplier" finished-at="2024-11-01T16:56:26 EDT" duration-ms="1971" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Runmode=Y, Description=Supervisor Login, Username=vishnu.71882@gmail.com, Expected Result=Success, Password=Vishnu123}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyLoginToApplicationUsingvalidCredentials -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:56:26 EDT" name="tearDown" finished-at="2024-11-01T16:56:26 EDT" duration-ms="108" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:56:26 EDT" name="Setup" finished-at="2024-11-01T16:56:30 EDT" duration-ms="4110" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyLoginToApplicationUsingvalidCredentials(java.util.HashMap)[pri:1, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:56:30 EDT" name="verifyLoginToApplicationUsingvalidCredentials" data-provider="ValidloginDataSupplier" finished-at="2024-11-01T16:56:32 EDT" duration-ms="2099" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Runmode=Y, Description=Team Member Login, Username=vishnu.71883@gmail.com, Expected Result=Success, Password=Vishnu123}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyLoginToApplicationUsingvalidCredentials -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:56:32 EDT" name="tearDown" finished-at="2024-11-01T16:56:32 EDT" duration-ms="96" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:56:32 EDT" name="Setup" finished-at="2024-11-01T16:56:36 EDT" duration-ms="3497" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyLoginToApplicationUsingvalidCredentials(java.util.HashMap)[pri:1, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:56:36 EDT" name="verifyLoginToApplicationUsingvalidCredentials" data-provider="ValidloginDataSupplier" finished-at="2024-11-01T16:56:38 EDT" duration-ms="2041" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Runmode=Y, Description=Trainee Login, Username=vishnu.71884@gmail.com, Expected Result=Success, Password=Vishnu123}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyLoginToApplicationUsingvalidCredentials -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:56:38 EDT" name="tearDown" finished-at="2024-11-01T16:56:38 EDT" duration-ms="135" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:56:38 EDT" name="Setup" finished-at="2024-11-01T16:56:42 EDT" duration-ms="4410" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyLoginToApplicationUsingInvalidCredentials(java.util.HashMap)[pri:2, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:56:42 EDT" name="verifyLoginToApplicationUsingInvalidCredentials" data-provider="InvalidloginDataSupplier" finished-at="2024-11-01T16:56:44 EDT" duration-ms="1724" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Runmode=Y, Description=Both Email &Pass In-Valid , Username=vishnu.1123@gmail, Expected Result=Success, Password=Vish}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyLoginToApplicationUsingInvalidCredentials -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:56:44 EDT" name="tearDown" finished-at="2024-11-01T16:56:44 EDT" duration-ms="110" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:56:44 EDT" name="Setup" finished-at="2024-11-01T16:56:48 EDT" duration-ms="3797" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyLoginToApplicationUsingInvalidCredentials(java.util.HashMap)[pri:2, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:56:48 EDT" name="verifyLoginToApplicationUsingInvalidCredentials" data-provider="InvalidloginDataSupplier" finished-at="2024-11-01T16:56:49 EDT" duration-ms="1509" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Runmode=Y, Description=InvalidEmail & ValidPass, Username=vishnu.1123@gmail, Expected Result=Success, Password=Vishnu123}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyLoginToApplicationUsingInvalidCredentials -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:56:49 EDT" name="tearDown" finished-at="2024-11-01T16:56:50 EDT" duration-ms="105" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:56:50 EDT" name="Setup" finished-at="2024-11-01T16:56:53 EDT" duration-ms="3834" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyLoginToApplicationUsingInvalidCredentials(java.util.HashMap)[pri:2, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:56:53 EDT" name="verifyLoginToApplicationUsingInvalidCredentials" data-provider="InvalidloginDataSupplier" finished-at="2024-11-01T16:56:55 EDT" duration-ms="1790" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Runmode=Y, Description=ValidEmail & InvalidPass, Username=vishnu.71883@gmail.com, Expected Result=Success, Password=Vishnu12}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyLoginToApplicationUsingInvalidCredentials -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:56:55 EDT" name="tearDown" finished-at="2024-11-01T16:56:55 EDT" duration-ms="103" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:56:55 EDT" name="Setup" finished-at="2024-11-01T16:57:00 EDT" duration-ms="4704" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyLoginToApplicationUsingInvalidCredentials(java.util.HashMap)[pri:2, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:57:00 EDT" name="verifyLoginToApplicationUsingInvalidCredentials" data-provider="InvalidloginDataSupplier" finished-at="2024-11-01T16:57:02 EDT" duration-ms="1791" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Runmode=Y, Description=NoCredentilals, Username= , Expected Result=Success, Password= }]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyLoginToApplicationUsingInvalidCredentials -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:57:02 EDT" name="tearDown" finished-at="2024-11-01T16:57:02 EDT" duration-ms="138" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:57:02 EDT" name="Setup" finished-at="2024-11-01T16:57:06 EDT" duration-ms="4322" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyForgotPasswordLink()[pri:6, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:57:06 EDT" name="verifyForgotPasswordLink" finished-at="2024-11-01T16:57:07 EDT" duration-ms="1202" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyForgotPasswordLink -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:57:07 EDT" name="tearDown" finished-at="2024-11-01T16:57:08 EDT" duration-ms="118" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:57:08 EDT" name="Setup" finished-at="2024-11-01T16:57:12 EDT" duration-ms="4306" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyPlaceholdersOnLoginPage()[pri:7, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:57:12 EDT" name="verifyPlaceholdersOnLoginPage" finished-at="2024-11-01T16:57:13 EDT" duration-ms="768" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPlaceholdersOnLoginPage -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:57:13 EDT" name="tearDown" finished-at="2024-11-01T16:57:13 EDT" duration-ms="123" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:57:13 EDT" name="Setup" finished-at="2024-11-01T16:57:17 EDT" duration-ms="3889" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyMaxLoginAttempts()[pri:11, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:57:17 EDT" name="verifyMaxLoginAttempts" finished-at="2024-11-01T16:57:21 EDT" duration-ms="4312" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyMaxLoginAttempts -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:57:21 EDT" name="tearDown" finished-at="2024-11-01T16:57:21 EDT" duration-ms="103" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:57:21 EDT" name="Setup" finished-at="2024-11-01T16:57:26 EDT" duration-ms="4783" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyPasswordFieldToggleToHide()[pri:12, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:57:26 EDT" name="verifyPasswordFieldToggleToHide" finished-at="2024-11-01T16:57:27 EDT" duration-ms="943" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPasswordFieldToggleToHide -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:57:27 EDT" name="tearDown" finished-at="2024-11-01T16:57:27 EDT" duration-ms="104" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:57:27 EDT" name="Setup" finished-at="2024-11-01T16:57:31 EDT" duration-ms="3974" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyPasswordCannotCopied()[pri:13, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:57:31 EDT" name="verifyPasswordCannotCopied" finished-at="2024-11-01T16:57:32 EDT" duration-ms="1156" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPasswordCannotCopied -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:57:32 EDT" name="tearDown" finished-at="2024-11-01T16:57:32 EDT" duration-ms="208" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:57:32 EDT" name="Setup" finished-at="2024-11-01T16:57:36 EDT" duration-ms="3899" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyPasswordNotVisibleInPageSource()[pri:14, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:57:36 EDT" name="verifyPasswordNotVisibleInPageSource" finished-at="2024-11-01T16:57:37 EDT" duration-ms="965" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPasswordNotVisibleInPageSource -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:57:37 EDT" name="tearDown" finished-at="2024-11-01T16:57:37 EDT" duration-ms="112" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:57:37 EDT" name="Setup" finished-at="2024-11-01T16:57:41 EDT" duration-ms="3906" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyLoggingAfterchangingPassword()[pri:15, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:57:41 EDT" name="verifyLoggingAfterchangingPassword" finished-at="2024-11-01T16:57:52 EDT" duration-ms="10892" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyLoggingAfterchangingPassword -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.LoginTest@3f07b12c]" started-at="2024-11-01T16:57:52 EDT" name="tearDown" finished-at="2024-11-01T16:57:52 EDT" duration-ms="103" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.LoginTest -->
      <class name="tests.RegisterTest">
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:57:52 EDT" name="Setup" finished-at="2024-11-01T16:57:56 EDT" duration-ms="3598" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyRegisterAccountUsingMandatoryFields()[pri:1, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:57:56 EDT" name="verifyRegisterAccountUsingMandatoryFields" finished-at="2024-11-01T16:57:59 EDT" duration-ms="3593" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyRegisterAccountUsingMandatoryFields -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:57:59 EDT" name="tearDown" finished-at="2024-11-01T16:57:59 EDT" duration-ms="147" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:57:59 EDT" name="Setup" finished-at="2024-11-01T16:58:03 EDT" duration-ms="3869" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyRegisterAccountUsingAllFields()[pri:2, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:58:03 EDT" name="verifyRegisterAccountUsingAllFields" finished-at="2024-11-01T16:58:07 EDT" duration-ms="4038" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyRegisterAccountUsingAllFields -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:58:07 EDT" name="tearDown" finished-at="2024-11-01T16:58:07 EDT" duration-ms="92" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:58:07 EDT" name="Setup" finished-at="2024-11-01T16:58:12 EDT" duration-ms="4135" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyRegisterAccountWithoutanyDetails()[pri:3, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:58:12 EDT" name="verifyRegisterAccountWithoutanyDetails" finished-at="2024-11-01T16:58:15 EDT" duration-ms="3037" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyRegisterAccountWithoutanyDetails -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:58:15 EDT" name="tearDown" finished-at="2024-11-01T16:58:15 EDT" duration-ms="104" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:58:15 EDT" name="Setup" finished-at="2024-11-01T16:58:19 EDT" duration-ms="4242" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyRegisterAccountYesSelectedForNewsletter()[pri:4, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:58:19 EDT" name="verifyRegisterAccountYesSelectedForNewsletter" finished-at="2024-11-01T16:58:23 EDT" duration-ms="4054" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyRegisterAccountYesSelectedForNewsletter -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:58:23 EDT" name="tearDown" finished-at="2024-11-01T16:58:23 EDT" duration-ms="115" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:58:23 EDT" name="Setup" finished-at="2024-11-01T16:58:27 EDT" duration-ms="3505" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyRegisterAccountNoSelectedForNewsletter()[pri:5, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:58:27 EDT" name="verifyRegisterAccountNoSelectedForNewsletter" finished-at="2024-11-01T16:58:30 EDT" duration-ms="3560" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyRegisterAccountNoSelectedForNewsletter -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:58:30 EDT" name="tearDown" finished-at="2024-11-01T16:58:30 EDT" duration-ms="101" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:58:30 EDT" name="Setup" finished-at="2024-11-01T16:58:35 EDT" duration-ms="4458" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyDiffWayNavigatingToRegisterAccount()[pri:6, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:58:35 EDT" name="verifyDiffWayNavigatingToRegisterAccount" finished-at="2024-11-01T16:58:38 EDT" duration-ms="2776" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyDiffWayNavigatingToRegisterAccount -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:58:38 EDT" name="tearDown" finished-at="2024-11-01T16:58:38 EDT" duration-ms="119" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:58:38 EDT" name="Setup" finished-at="2024-11-01T16:58:41 EDT" duration-ms="3440" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyRegisteringWithDifferentPassAndConfirmPass()[pri:7, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:58:41 EDT" name="verifyRegisteringWithDifferentPassAndConfirmPass" finished-at="2024-11-01T16:58:45 EDT" duration-ms="3606" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyRegisteringWithDifferentPassAndConfirmPass -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:58:45 EDT" name="tearDown" finished-at="2024-11-01T16:58:45 EDT" duration-ms="93" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:58:45 EDT" name="Setup" finished-at="2024-11-01T16:58:48 EDT" duration-ms="3616" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyRegisteringWithExistingDetails()[pri:8, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:58:48 EDT" name="verifyRegisteringWithExistingDetails" finished-at="2024-11-01T16:58:52 EDT" duration-ms="3440" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyRegisteringWithExistingDetails -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:58:52 EDT" name="tearDown" finished-at="2024-11-01T16:58:52 EDT" duration-ms="105" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:58:52 EDT" name="Setup" finished-at="2024-11-01T16:58:56 EDT" duration-ms="4317" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyInvalidEmailTooltipMsg()[pri:9, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:58:56 EDT" name="verifyInvalidEmailTooltipMsg" finished-at="2024-11-01T16:59:02 EDT" duration-ms="5376" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyInvalidEmailTooltipMsg -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:59:02 EDT" name="tearDown" finished-at="2024-11-01T16:59:02 EDT" duration-ms="154" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:59:02 EDT" name="Setup" finished-at="2024-11-01T16:59:06 EDT" duration-ms="3796" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method retried="true" signature="verifyUserCannotuseInvalidPhoneNumber(java.util.HashMap)[pri:10, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:59:06 EDT" name="verifyUserCannotuseInvalidPhoneNumber" data-provider="invalidPhoneNumbersDataSupplier" finished-at="2024-11-01T16:59:09 EDT" duration-ms="3729" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Email=autogenerate, ExpectedResult=Success, Description=Phone Text Entered ::  Nine Digits, Telephone=1.23456789E8, FirstName=Abhi, PasswordConfirm=Valid1Password!, Runmode=Y, LastName=Abhi, Password=Valid1Password!}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failEquals(Assert.java:1582)
at org.testng.Assert.assertNotEqualsImpl(Assert.java:157)
at org.testng.Assert.assertNotEquals(Assert.java:2201)
at org.testng.Assert.assertNotEquals(Assert.java:2223)
at tests.RegisterTest.verifyUserCannotuseInvalidPhoneNumber(RegisterTest.java:123)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyUserCannotuseInvalidPhoneNumber -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:59:09 EDT" name="tearDown" finished-at="2024-11-01T16:59:10 EDT" duration-ms="118" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:59:10 EDT" name="Setup" finished-at="2024-11-01T16:59:13 EDT" duration-ms="3117" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyUserCannotuseInvalidPhoneNumber(java.util.HashMap)[pri:10, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:59:13 EDT" name="verifyUserCannotuseInvalidPhoneNumber" data-provider="invalidPhoneNumbersDataSupplier" finished-at="2024-11-01T16:59:18 EDT" duration-ms="5281" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Email=autogenerate, ExpectedResult=Success, Description=Phone Text Entered ::  Nine Digits, Telephone=1.23456789E8, FirstName=Abhi, PasswordConfirm=Valid1Password!, Runmode=Y, LastName=Abhi, Password=Valid1Password!}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failEquals(Assert.java:1582)
at org.testng.Assert.assertNotEqualsImpl(Assert.java:157)
at org.testng.Assert.assertNotEquals(Assert.java:2201)
at org.testng.Assert.assertNotEquals(Assert.java:2223)
at tests.RegisterTest.verifyUserCannotuseInvalidPhoneNumber(RegisterTest.java:123)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.retryFailed(TestInvoker.java:269)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:76)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyUserCannotuseInvalidPhoneNumber -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:59:18 EDT" name="tearDown" finished-at="2024-11-01T16:59:18 EDT" duration-ms="95" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:59:18 EDT" name="Setup" finished-at="2024-11-01T16:59:22 EDT" duration-ms="4096" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method retried="true" signature="verifyUserCannotuseInvalidPhoneNumber(java.util.HashMap)[pri:10, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:59:22 EDT" name="verifyUserCannotuseInvalidPhoneNumber" data-provider="invalidPhoneNumbersDataSupplier" finished-at="2024-11-01T16:59:26 EDT" duration-ms="3633" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Email=autogenerate, ExpectedResult=Success, Description=Phone Text Entered ::  Eleven Digits, Telephone=1.2345678901E10, FirstName=Trevor, PasswordConfirm=Valid1Password!, Runmode=Y, LastName=Tre, Password=Valid1Password!}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failEquals(Assert.java:1582)
at org.testng.Assert.assertNotEqualsImpl(Assert.java:157)
at org.testng.Assert.assertNotEquals(Assert.java:2201)
at org.testng.Assert.assertNotEquals(Assert.java:2223)
at tests.RegisterTest.verifyUserCannotuseInvalidPhoneNumber(RegisterTest.java:123)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyUserCannotuseInvalidPhoneNumber -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:59:26 EDT" name="tearDown" finished-at="2024-11-01T16:59:26 EDT" duration-ms="115" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:59:26 EDT" name="Setup" finished-at="2024-11-01T16:59:30 EDT" duration-ms="3730" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyUserCannotuseInvalidPhoneNumber(java.util.HashMap)[pri:10, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:59:30 EDT" name="verifyUserCannotuseInvalidPhoneNumber" data-provider="invalidPhoneNumbersDataSupplier" finished-at="2024-11-01T16:59:33 EDT" duration-ms="3672" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Email=autogenerate, ExpectedResult=Success, Description=Phone Text Entered ::  Eleven Digits, Telephone=1.2345678901E10, FirstName=Trevor, PasswordConfirm=Valid1Password!, Runmode=Y, LastName=Tre, Password=Valid1Password!}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failEquals(Assert.java:1582)
at org.testng.Assert.assertNotEqualsImpl(Assert.java:157)
at org.testng.Assert.assertNotEquals(Assert.java:2201)
at org.testng.Assert.assertNotEquals(Assert.java:2223)
at tests.RegisterTest.verifyUserCannotuseInvalidPhoneNumber(RegisterTest.java:123)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.retryFailed(TestInvoker.java:269)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:76)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyUserCannotuseInvalidPhoneNumber -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:59:34 EDT" name="tearDown" finished-at="2024-11-01T16:59:34 EDT" duration-ms="117" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:59:34 EDT" name="Setup" finished-at="2024-11-01T16:59:37 EDT" duration-ms="3603" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method retried="true" signature="verifyUserCannotuseInvalidPhoneNumber(java.util.HashMap)[pri:10, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:59:37 EDT" name="verifyUserCannotuseInvalidPhoneNumber" data-provider="invalidPhoneNumbersDataSupplier" finished-at="2024-11-01T16:59:41 EDT" duration-ms="3522" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Email=autogenerate, ExpectedResult=Success, Description=Phone Text Entered :: Non Numeric, Telephone=abcdefghij, FirstName=Pawan, PasswordConfirm=Valid1Password!, Runmode=Y, LastName=Paw, Password=Valid1Password!}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failEquals(Assert.java:1582)
at org.testng.Assert.assertNotEqualsImpl(Assert.java:157)
at org.testng.Assert.assertNotEquals(Assert.java:2201)
at org.testng.Assert.assertNotEquals(Assert.java:2223)
at tests.RegisterTest.verifyUserCannotuseInvalidPhoneNumber(RegisterTest.java:123)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyUserCannotuseInvalidPhoneNumber -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:59:41 EDT" name="tearDown" finished-at="2024-11-01T16:59:41 EDT" duration-ms="107" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:59:41 EDT" name="Setup" finished-at="2024-11-01T16:59:45 EDT" duration-ms="3817" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyUserCannotuseInvalidPhoneNumber(java.util.HashMap)[pri:10, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:59:45 EDT" name="verifyUserCannotuseInvalidPhoneNumber" data-provider="invalidPhoneNumbersDataSupplier" finished-at="2024-11-01T16:59:49 EDT" duration-ms="4006" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Email=autogenerate, ExpectedResult=Success, Description=Phone Text Entered :: Non Numeric, Telephone=abcdefghij, FirstName=Pawan, PasswordConfirm=Valid1Password!, Runmode=Y, LastName=Paw, Password=Valid1Password!}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failEquals(Assert.java:1582)
at org.testng.Assert.assertNotEqualsImpl(Assert.java:157)
at org.testng.Assert.assertNotEquals(Assert.java:2201)
at org.testng.Assert.assertNotEquals(Assert.java:2223)
at tests.RegisterTest.verifyUserCannotuseInvalidPhoneNumber(RegisterTest.java:123)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.retryFailed(TestInvoker.java:269)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:76)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyUserCannotuseInvalidPhoneNumber -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:59:49 EDT" name="tearDown" finished-at="2024-11-01T16:59:49 EDT" duration-ms="103" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:59:49 EDT" name="Setup" finished-at="2024-11-01T16:59:53 EDT" duration-ms="4135" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method retried="true" signature="verifyUserCannotuseInvalidPhoneNumber(java.util.HashMap)[pri:10, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:59:53 EDT" name="verifyUserCannotuseInvalidPhoneNumber" data-provider="invalidPhoneNumbersDataSupplier" finished-at="2024-11-01T16:59:57 EDT" duration-ms="3552" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Email=autogenerate, ExpectedResult=Success, Description=Phone Text Entered ::   All Special Characters, Telephone=!@#$%^&*(), FirstName=Rahul, PasswordConfirm=Valid1Password!, Runmode=Y, LastName=Rah, Password=Valid1Password!}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failEquals(Assert.java:1582)
at org.testng.Assert.assertNotEqualsImpl(Assert.java:157)
at org.testng.Assert.assertNotEquals(Assert.java:2201)
at org.testng.Assert.assertNotEquals(Assert.java:2223)
at tests.RegisterTest.verifyUserCannotuseInvalidPhoneNumber(RegisterTest.java:123)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyUserCannotuseInvalidPhoneNumber -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:59:57 EDT" name="tearDown" finished-at="2024-11-01T16:59:57 EDT" duration-ms="106" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T16:59:57 EDT" name="Setup" finished-at="2024-11-01T17:00:01 EDT" duration-ms="4361" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyUserCannotuseInvalidPhoneNumber(java.util.HashMap)[pri:10, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:00:01 EDT" name="verifyUserCannotuseInvalidPhoneNumber" data-provider="invalidPhoneNumbersDataSupplier" finished-at="2024-11-01T17:00:05 EDT" duration-ms="4050" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Email=autogenerate, ExpectedResult=Success, Description=Phone Text Entered ::   All Special Characters, Telephone=!@#$%^&*(), FirstName=Rahul, PasswordConfirm=Valid1Password!, Runmode=Y, LastName=Rah, Password=Valid1Password!}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failEquals(Assert.java:1582)
at org.testng.Assert.assertNotEqualsImpl(Assert.java:157)
at org.testng.Assert.assertNotEquals(Assert.java:2201)
at org.testng.Assert.assertNotEquals(Assert.java:2223)
at tests.RegisterTest.verifyUserCannotuseInvalidPhoneNumber(RegisterTest.java:123)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.retryFailed(TestInvoker.java:269)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:76)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyUserCannotuseInvalidPhoneNumber -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:00:05 EDT" name="tearDown" finished-at="2024-11-01T17:00:05 EDT" duration-ms="95" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:00:05 EDT" name="Setup" finished-at="2024-11-01T17:00:09 EDT" duration-ms="3863" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method retried="true" signature="verifyUserCannotuseInvalidPhoneNumber(java.util.HashMap)[pri:10, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:00:09 EDT" name="verifyUserCannotuseInvalidPhoneNumber" data-provider="invalidPhoneNumbersDataSupplier" finished-at="2024-11-01T17:00:13 EDT" duration-ms="3629" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Email=autogenerate, ExpectedResult=Success, Description= Phone Text Entered :: With Spaces, Telephone=1234 67 90, FirstName=Cohen, PasswordConfirm=Valid1Password!, Runmode=Y, LastName=Coh, Password=Valid1Password!}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failEquals(Assert.java:1582)
at org.testng.Assert.assertNotEqualsImpl(Assert.java:157)
at org.testng.Assert.assertNotEquals(Assert.java:2201)
at org.testng.Assert.assertNotEquals(Assert.java:2223)
at tests.RegisterTest.verifyUserCannotuseInvalidPhoneNumber(RegisterTest.java:123)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyUserCannotuseInvalidPhoneNumber -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:00:13 EDT" name="tearDown" finished-at="2024-11-01T17:00:13 EDT" duration-ms="122" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:00:13 EDT" name="Setup" finished-at="2024-11-01T17:00:16 EDT" duration-ms="3388" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyUserCannotuseInvalidPhoneNumber(java.util.HashMap)[pri:10, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:00:16 EDT" name="verifyUserCannotuseInvalidPhoneNumber" data-provider="invalidPhoneNumbersDataSupplier" finished-at="2024-11-01T17:00:20 EDT" duration-ms="3688" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Email=autogenerate, ExpectedResult=Success, Description= Phone Text Entered :: With Spaces, Telephone=1234 67 90, FirstName=Cohen, PasswordConfirm=Valid1Password!, Runmode=Y, LastName=Coh, Password=Valid1Password!}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failEquals(Assert.java:1582)
at org.testng.Assert.assertNotEqualsImpl(Assert.java:157)
at org.testng.Assert.assertNotEquals(Assert.java:2201)
at org.testng.Assert.assertNotEquals(Assert.java:2223)
at tests.RegisterTest.verifyUserCannotuseInvalidPhoneNumber(RegisterTest.java:123)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.retryFailed(TestInvoker.java:269)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:76)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyUserCannotuseInvalidPhoneNumber -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:00:20 EDT" name="tearDown" finished-at="2024-11-01T17:00:20 EDT" duration-ms="114" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:00:20 EDT" name="Setup" finished-at="2024-11-01T17:00:24 EDT" duration-ms="3732" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyThePlaceholders()[pri:11, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:00:24 EDT" name="verifyThePlaceholders" finished-at="2024-11-01T17:00:25 EDT" duration-ms="994" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyThePlaceholders -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:00:25 EDT" name="tearDown" finished-at="2024-11-01T17:00:25 EDT" duration-ms="125" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:00:25 EDT" name="Setup" finished-at="2024-11-01T17:00:29 EDT" duration-ms="3781" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyAsterickSymbolForMandatoryFields()[pri:12, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:00:29 EDT" name="verifyAsterickSymbolForMandatoryFields" finished-at="2024-11-01T17:00:30 EDT" duration-ms="1169" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAsterickSymbolForMandatoryFields -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:00:30 EDT" name="tearDown" finished-at="2024-11-01T17:00:30 EDT" duration-ms="185" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:00:30 EDT" name="Setup" finished-at="2024-11-01T17:00:34 EDT" duration-ms="3950" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method retried="true" signature="verifyPassWordFieldFollowComplexityStandards(java.util.HashMap)[pri:13, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:00:34 EDT" name="verifyPassWordFieldFollowComplexityStandards" data-provider="PwdComplexityDataSupplier" finished-at="2024-11-01T17:00:38 EDT" duration-ms="3579" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Email=autogenerate, ExpectedResult=Success, Description=PWD Entered ::  All Uppercase, Telephone=1.23456789E9, FirstName=Abhi, PasswordConfirm=password123!, Runmode=Y, LastName=Abhi, Password=password123!}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failEquals(Assert.java:1582)
at org.testng.Assert.assertNotEqualsImpl(Assert.java:157)
at org.testng.Assert.assertNotEquals(Assert.java:2201)
at org.testng.Assert.assertNotEquals(Assert.java:2223)
at tests.RegisterTest.verifyPassWordFieldFollowComplexityStandards(RegisterTest.java:168)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPassWordFieldFollowComplexityStandards -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:00:38 EDT" name="tearDown" finished-at="2024-11-01T17:00:38 EDT" duration-ms="93" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:00:38 EDT" name="Setup" finished-at="2024-11-01T17:00:42 EDT" duration-ms="3734" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyPassWordFieldFollowComplexityStandards(java.util.HashMap)[pri:13, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:00:42 EDT" name="verifyPassWordFieldFollowComplexityStandards" data-provider="PwdComplexityDataSupplier" finished-at="2024-11-01T17:00:47 EDT" duration-ms="4935" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Email=autogenerate, ExpectedResult=Success, Description=PWD Entered ::  All Uppercase, Telephone=1.23456789E9, FirstName=Abhi, PasswordConfirm=password123!, Runmode=Y, LastName=Abhi, Password=password123!}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failEquals(Assert.java:1582)
at org.testng.Assert.assertNotEqualsImpl(Assert.java:157)
at org.testng.Assert.assertNotEquals(Assert.java:2201)
at org.testng.Assert.assertNotEquals(Assert.java:2223)
at tests.RegisterTest.verifyPassWordFieldFollowComplexityStandards(RegisterTest.java:168)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.retryFailed(TestInvoker.java:269)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:76)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPassWordFieldFollowComplexityStandards -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:00:47 EDT" name="tearDown" finished-at="2024-11-01T17:00:47 EDT" duration-ms="114" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:00:47 EDT" name="Setup" finished-at="2024-11-01T17:00:51 EDT" duration-ms="3936" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method retried="true" signature="verifyPassWordFieldFollowComplexityStandards(java.util.HashMap)[pri:13, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:00:51 EDT" name="verifyPassWordFieldFollowComplexityStandards" data-provider="PwdComplexityDataSupplier" finished-at="2024-11-01T17:00:55 EDT" duration-ms="3799" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Email=autogenerate, ExpectedResult=Success, Description=PWD Entered ::  All Lowercase, Telephone=1.23456789E9, FirstName=Trevor, PasswordConfirm=PASSWORD123!, Runmode=Y, LastName=Tre, Password=PASSWORD123!}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failEquals(Assert.java:1582)
at org.testng.Assert.assertNotEqualsImpl(Assert.java:157)
at org.testng.Assert.assertNotEquals(Assert.java:2201)
at org.testng.Assert.assertNotEquals(Assert.java:2223)
at tests.RegisterTest.verifyPassWordFieldFollowComplexityStandards(RegisterTest.java:168)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPassWordFieldFollowComplexityStandards -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:00:55 EDT" name="tearDown" finished-at="2024-11-01T17:00:55 EDT" duration-ms="94" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:00:55 EDT" name="Setup" finished-at="2024-11-01T17:00:59 EDT" duration-ms="4021" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyPassWordFieldFollowComplexityStandards(java.util.HashMap)[pri:13, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:00:59 EDT" name="verifyPassWordFieldFollowComplexityStandards" data-provider="PwdComplexityDataSupplier" finished-at="2024-11-01T17:01:02 EDT" duration-ms="3446" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Email=autogenerate, ExpectedResult=Success, Description=PWD Entered ::  All Lowercase, Telephone=1.23456789E9, FirstName=Trevor, PasswordConfirm=PASSWORD123!, Runmode=Y, LastName=Tre, Password=PASSWORD123!}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failEquals(Assert.java:1582)
at org.testng.Assert.assertNotEqualsImpl(Assert.java:157)
at org.testng.Assert.assertNotEquals(Assert.java:2201)
at org.testng.Assert.assertNotEquals(Assert.java:2223)
at tests.RegisterTest.verifyPassWordFieldFollowComplexityStandards(RegisterTest.java:168)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.retryFailed(TestInvoker.java:269)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:76)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPassWordFieldFollowComplexityStandards -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:01:02 EDT" name="tearDown" finished-at="2024-11-01T17:01:02 EDT" duration-ms="111" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:01:02 EDT" name="Setup" finished-at="2024-11-01T17:01:06 EDT" duration-ms="3484" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method retried="true" signature="verifyPassWordFieldFollowComplexityStandards(java.util.HashMap)[pri:13, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:01:06 EDT" name="verifyPassWordFieldFollowComplexityStandards" data-provider="PwdComplexityDataSupplier" finished-at="2024-11-01T17:01:09 EDT" duration-ms="3515" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Email=autogenerate, ExpectedResult=Success, Description=PWD Entered ::  All Numbers, Telephone=1.23456789E9, FirstName=Pawan, PasswordConfirm=1.23456789E9, Runmode=Y, LastName=Paw, Password=1.23456789E9}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failEquals(Assert.java:1582)
at org.testng.Assert.assertNotEqualsImpl(Assert.java:157)
at org.testng.Assert.assertNotEquals(Assert.java:2201)
at org.testng.Assert.assertNotEquals(Assert.java:2223)
at tests.RegisterTest.verifyPassWordFieldFollowComplexityStandards(RegisterTest.java:168)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPassWordFieldFollowComplexityStandards -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:01:09 EDT" name="tearDown" finished-at="2024-11-01T17:01:10 EDT" duration-ms="94" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:01:10 EDT" name="Setup" finished-at="2024-11-01T17:01:13 EDT" duration-ms="3670" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyPassWordFieldFollowComplexityStandards(java.util.HashMap)[pri:13, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:01:13 EDT" name="verifyPassWordFieldFollowComplexityStandards" data-provider="PwdComplexityDataSupplier" finished-at="2024-11-01T17:01:16 EDT" duration-ms="2971" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Email=autogenerate, ExpectedResult=Success, Description=PWD Entered ::  All Numbers, Telephone=1.23456789E9, FirstName=Pawan, PasswordConfirm=1.23456789E9, Runmode=Y, LastName=Paw, Password=1.23456789E9}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failEquals(Assert.java:1582)
at org.testng.Assert.assertNotEqualsImpl(Assert.java:157)
at org.testng.Assert.assertNotEquals(Assert.java:2201)
at org.testng.Assert.assertNotEquals(Assert.java:2223)
at tests.RegisterTest.verifyPassWordFieldFollowComplexityStandards(RegisterTest.java:168)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.retryFailed(TestInvoker.java:269)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:76)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPassWordFieldFollowComplexityStandards -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:01:16 EDT" name="tearDown" finished-at="2024-11-01T17:01:16 EDT" duration-ms="102" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:01:16 EDT" name="Setup" finished-at="2024-11-01T17:01:21 EDT" duration-ms="4133" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method retried="true" signature="verifyPassWordFieldFollowComplexityStandards(java.util.HashMap)[pri:13, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:01:21 EDT" name="verifyPassWordFieldFollowComplexityStandards" data-provider="PwdComplexityDataSupplier" finished-at="2024-11-01T17:01:23 EDT" duration-ms="2975" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Email=autogenerate, ExpectedResult=Success, Description=PWD Entered ::  No Numbers, Telephone=1.23456789E9, FirstName=Rahul, PasswordConfirm=Password!, Runmode=Y, LastName=Rah, Password=Password!}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failEquals(Assert.java:1582)
at org.testng.Assert.assertNotEqualsImpl(Assert.java:157)
at org.testng.Assert.assertNotEquals(Assert.java:2201)
at org.testng.Assert.assertNotEquals(Assert.java:2223)
at tests.RegisterTest.verifyPassWordFieldFollowComplexityStandards(RegisterTest.java:168)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPassWordFieldFollowComplexityStandards -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:01:23 EDT" name="tearDown" finished-at="2024-11-01T17:01:24 EDT" duration-ms="110" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:01:24 EDT" name="Setup" finished-at="2024-11-01T17:01:28 EDT" duration-ms="4199" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyPassWordFieldFollowComplexityStandards(java.util.HashMap)[pri:13, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:01:28 EDT" name="verifyPassWordFieldFollowComplexityStandards" data-provider="PwdComplexityDataSupplier" finished-at="2024-11-01T17:01:31 EDT" duration-ms="3247" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Email=autogenerate, ExpectedResult=Success, Description=PWD Entered ::  No Numbers, Telephone=1.23456789E9, FirstName=Rahul, PasswordConfirm=Password!, Runmode=Y, LastName=Rah, Password=Password!}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failEquals(Assert.java:1582)
at org.testng.Assert.assertNotEqualsImpl(Assert.java:157)
at org.testng.Assert.assertNotEquals(Assert.java:2201)
at org.testng.Assert.assertNotEquals(Assert.java:2223)
at tests.RegisterTest.verifyPassWordFieldFollowComplexityStandards(RegisterTest.java:168)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.retryFailed(TestInvoker.java:269)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:76)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPassWordFieldFollowComplexityStandards -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:01:31 EDT" name="tearDown" finished-at="2024-11-01T17:01:31 EDT" duration-ms="106" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:01:31 EDT" name="Setup" finished-at="2024-11-01T17:01:36 EDT" duration-ms="4390" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method retried="true" signature="verifyPassWordFieldFollowComplexityStandards(java.util.HashMap)[pri:13, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:01:36 EDT" name="verifyPassWordFieldFollowComplexityStandards" data-provider="PwdComplexityDataSupplier" finished-at="2024-11-01T17:01:39 EDT" duration-ms="3330" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Email=autogenerate, ExpectedResult=Success, Description=PWD Entered ::  All Special Characters, Telephone=1.23456789E9, FirstName=Shyam, PasswordConfirm=^$^*^$*^*$, Runmode=Y, LastName=Shy, Password=^$^*^$*^*$}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failEquals(Assert.java:1582)
at org.testng.Assert.assertNotEqualsImpl(Assert.java:157)
at org.testng.Assert.assertNotEquals(Assert.java:2201)
at org.testng.Assert.assertNotEquals(Assert.java:2223)
at tests.RegisterTest.verifyPassWordFieldFollowComplexityStandards(RegisterTest.java:168)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPassWordFieldFollowComplexityStandards -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:01:39 EDT" name="tearDown" finished-at="2024-11-01T17:01:39 EDT" duration-ms="96" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:01:39 EDT" name="Setup" finished-at="2024-11-01T17:01:43 EDT" duration-ms="3701" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyPassWordFieldFollowComplexityStandards(java.util.HashMap)[pri:13, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:01:43 EDT" name="verifyPassWordFieldFollowComplexityStandards" data-provider="PwdComplexityDataSupplier" finished-at="2024-11-01T17:01:47 EDT" duration-ms="3901" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Email=autogenerate, ExpectedResult=Success, Description=PWD Entered ::  All Special Characters, Telephone=1.23456789E9, FirstName=Shyam, PasswordConfirm=^$^*^$*^*$, Runmode=Y, LastName=Shy, Password=^$^*^$*^*$}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failEquals(Assert.java:1582)
at org.testng.Assert.assertNotEqualsImpl(Assert.java:157)
at org.testng.Assert.assertNotEquals(Assert.java:2201)
at org.testng.Assert.assertNotEquals(Assert.java:2223)
at tests.RegisterTest.verifyPassWordFieldFollowComplexityStandards(RegisterTest.java:168)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.retryFailed(TestInvoker.java:269)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:76)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPassWordFieldFollowComplexityStandards -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:01:47 EDT" name="tearDown" finished-at="2024-11-01T17:01:47 EDT" duration-ms="107" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:01:47 EDT" name="Setup" finished-at="2024-11-01T17:01:51 EDT" duration-ms="4483" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method retried="true" signature="verifyPassWordFieldFollowComplexityStandards(java.util.HashMap)[pri:13, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:01:51 EDT" name="verifyPassWordFieldFollowComplexityStandards" data-provider="PwdComplexityDataSupplier" finished-at="2024-11-01T17:01:55 EDT" duration-ms="3387" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Email=autogenerate, ExpectedResult=Success, Description=PWD Entered ::  No Special Characters, Telephone=1.23456789E9, FirstName=Cohen, PasswordConfirm=Password123, Runmode=Y, LastName=Coh, Password=Password123}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failEquals(Assert.java:1582)
at org.testng.Assert.assertNotEqualsImpl(Assert.java:157)
at org.testng.Assert.assertNotEquals(Assert.java:2201)
at org.testng.Assert.assertNotEquals(Assert.java:2223)
at tests.RegisterTest.verifyPassWordFieldFollowComplexityStandards(RegisterTest.java:168)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPassWordFieldFollowComplexityStandards -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:01:55 EDT" name="tearDown" finished-at="2024-11-01T17:01:55 EDT" duration-ms="119" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:01:55 EDT" name="Setup" finished-at="2024-11-01T17:01:59 EDT" duration-ms="3611" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyPassWordFieldFollowComplexityStandards(java.util.HashMap)[pri:13, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:01:59 EDT" name="verifyPassWordFieldFollowComplexityStandards" data-provider="PwdComplexityDataSupplier" finished-at="2024-11-01T17:02:02 EDT" duration-ms="3587" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Email=autogenerate, ExpectedResult=Success, Description=PWD Entered ::  No Special Characters, Telephone=1.23456789E9, FirstName=Cohen, PasswordConfirm=Password123, Runmode=Y, LastName=Coh, Password=Password123}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failEquals(Assert.java:1582)
at org.testng.Assert.assertNotEqualsImpl(Assert.java:157)
at org.testng.Assert.assertNotEquals(Assert.java:2201)
at org.testng.Assert.assertNotEquals(Assert.java:2223)
at tests.RegisterTest.verifyPassWordFieldFollowComplexityStandards(RegisterTest.java:168)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.retryFailed(TestInvoker.java:269)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:76)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPassWordFieldFollowComplexityStandards -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:02:02 EDT" name="tearDown" finished-at="2024-11-01T17:02:02 EDT" duration-ms="114" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:02:02 EDT" name="Setup" finished-at="2024-11-01T17:02:06 EDT" duration-ms="3675" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method retried="true" signature="verifyPassWordFieldFollowComplexityStandards(java.util.HashMap)[pri:13, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:02:06 EDT" name="verifyPassWordFieldFollowComplexityStandards" data-provider="PwdComplexityDataSupplier" finished-at="2024-11-01T17:02:10 EDT" duration-ms="3520" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Email=autogenerate, ExpectedResult=Success, Description=PWD Entered ::  With Spaces, Telephone=1.23456789E9, FirstName=Lawren, PasswordConfirm=Pass word 123!, Runmode=Y, LastName=Law, Password=Pass word 123!}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failEquals(Assert.java:1582)
at org.testng.Assert.assertNotEqualsImpl(Assert.java:157)
at org.testng.Assert.assertNotEquals(Assert.java:2201)
at org.testng.Assert.assertNotEquals(Assert.java:2223)
at tests.RegisterTest.verifyPassWordFieldFollowComplexityStandards(RegisterTest.java:168)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPassWordFieldFollowComplexityStandards -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:02:10 EDT" name="tearDown" finished-at="2024-11-01T17:02:10 EDT" duration-ms="100" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:02:10 EDT" name="Setup" finished-at="2024-11-01T17:02:13 EDT" duration-ms="3648" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyPassWordFieldFollowComplexityStandards(java.util.HashMap)[pri:13, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:02:13 EDT" name="verifyPassWordFieldFollowComplexityStandards" data-provider="PwdComplexityDataSupplier" finished-at="2024-11-01T17:02:17 EDT" duration-ms="4066" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Email=autogenerate, ExpectedResult=Success, Description=PWD Entered ::  With Spaces, Telephone=1.23456789E9, FirstName=Lawren, PasswordConfirm=Pass word 123!, Runmode=Y, LastName=Law, Password=Pass word 123!}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect [Your Account Has Been Created!] but found [Your Account Has Been Created!]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failEquals(Assert.java:1582)
at org.testng.Assert.assertNotEqualsImpl(Assert.java:157)
at org.testng.Assert.assertNotEquals(Assert.java:2201)
at org.testng.Assert.assertNotEquals(Assert.java:2223)
at tests.RegisterTest.verifyPassWordFieldFollowComplexityStandards(RegisterTest.java:168)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.retryFailed(TestInvoker.java:269)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:76)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPassWordFieldFollowComplexityStandards -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:02:17 EDT" name="tearDown" finished-at="2024-11-01T17:02:18 EDT" duration-ms="93" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:02:18 EDT" name="Setup" finished-at="2024-11-01T17:02:21 EDT" duration-ms="3696" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyCheckboxNotCheckedByDefault()[pri:14, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:02:21 EDT" name="verifyCheckboxNotCheckedByDefault" finished-at="2024-11-01T17:02:22 EDT" duration-ms="898" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyCheckboxNotCheckedByDefault -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:02:22 EDT" name="tearDown" finished-at="2024-11-01T17:02:22 EDT" duration-ms="115" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:02:22 EDT" name="Setup" finished-at="2024-11-01T17:02:26 EDT" duration-ms="3784" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyRegisteringWithNotSelectingPrivacyPolicy()[pri:15, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:02:26 EDT" name="verifyRegisteringWithNotSelectingPrivacyPolicy" finished-at="2024-11-01T17:02:29 EDT" duration-ms="3278" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyRegisteringWithNotSelectingPrivacyPolicy -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:02:29 EDT" name="tearDown" finished-at="2024-11-01T17:02:29 EDT" duration-ms="115" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:02:29 EDT" name="Setup" finished-at="2024-11-01T17:02:33 EDT" duration-ms="3668" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyPasswordAndConfirmPasswordToggledToHide()[pri:16, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:02:33 EDT" name="verifyPasswordAndConfirmPasswordToggledToHide" finished-at="2024-11-01T17:02:34 EDT" duration-ms="1350" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyPasswordAndConfirmPasswordToggledToHide -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:02:34 EDT" name="tearDown" finished-at="2024-11-01T17:02:35 EDT" duration-ms="122" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:02:35 EDT" name="Setup" finished-at="2024-11-01T17:02:38 EDT" duration-ms="3826" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyRegisteringWithNotEnteringPassConfirm()[pri:17, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:02:38 EDT" name="verifyRegisteringWithNotEnteringPassConfirm" finished-at="2024-11-01T17:02:42 EDT" duration-ms="3364" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyRegisteringWithNotEnteringPassConfirm -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:02:42 EDT" name="tearDown" finished-at="2024-11-01T17:02:42 EDT" duration-ms="113" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:02:42 EDT" name="Setup" finished-at="2024-11-01T17:02:45 EDT" duration-ms="3607" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyConfirmationEmailSendForSuccessfullRegistration()[pri:18, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:02:45 EDT" name="verifyConfirmationEmailSendForSuccessfullRegistration" finished-at="2024-11-01T17:02:49 EDT" duration-ms="3814" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyConfirmationEmailSendForSuccessfullRegistration -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.RegisterTest@4b3a45f1]" started-at="2024-11-01T17:02:49 EDT" name="tearDown" finished-at="2024-11-01T17:02:49 EDT" duration-ms="103" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.RegisterTest -->
      <class name="tests.LogoutTest">
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.LogoutTest@17a87e37]" started-at="2024-11-01T17:02:49 EDT" name="Setup" finished-at="2024-11-01T17:02:53 EDT" duration-ms="3393" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="logoutFromMyAccountDropMenu()[pri:1, instance:tests.LogoutTest@17a87e37]" started-at="2024-11-01T17:02:53 EDT" name="logoutFromMyAccountDropMenu" finished-at="2024-11-01T17:02:56 EDT" duration-ms="2768" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logoutFromMyAccountDropMenu -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.LogoutTest@17a87e37]" started-at="2024-11-01T17:02:56 EDT" name="tearDown" finished-at="2024-11-01T17:02:56 EDT" duration-ms="97" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="Setup(java.lang.String,java.lang.String)[pri:0, instance:tests.LogoutTest@17a87e37]" started-at="2024-11-01T17:02:56 EDT" name="Setup" finished-at="2024-11-01T17:03:00 EDT" duration-ms="4237" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Setup -->
        <test-method signature="verifyLogoutFromRightColumnOption()[pri:2, instance:tests.LogoutTest@17a87e37]" started-at="2024-11-01T17:03:00 EDT" name="verifyLogoutFromRightColumnOption" finished-at="2024-11-01T17:03:03 EDT" duration-ms="2954" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyLogoutFromRightColumnOption -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.LogoutTest@17a87e37]" started-at="2024-11-01T17:03:03 EDT" name="tearDown" finished-at="2024-11-01T17:03:03 EDT" duration-ms="104" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.LogoutTest -->
    </test> <!-- Test -->
  </suite> <!-- Grouping-Suite -->
</testng-results>
